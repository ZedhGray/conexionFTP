# Aplicación ConexionFTP

[![Versión](3.0)]

"Herramientas para transferencia SFTP bidireccional usando Paramiko"

## Descripción

Este proyecto incluye dos scripts simples para transferencia de archivos vía SFTP:

- **connectionFTP.py** - Envía archivos de tu PC al servidor
- **ReceiveFTP.py** - Descarga archivos del servidor a tu PC

Ambos scripts son minimalistas y directos: **solo conectan y transfieren archivos**.

## Características principales

### SendFTP.py (Enviar)

- Sube recursivamente todos los archivos y carpetas desde tu PC al servidor
- Mantiene la misma estructura de directorios en el servidor
- Crea directorios automáticamente en el servidor si no existen

### ReceiveFTP.py (Recibir)

- Descarga recursivamente todos los archivos y carpetas desde el servidor
- Mantiene la misma estructura de directorios en tu PC
- Crea directorios automáticamente en tu PC si no existen

### Características comunes

- ✅ Conexión SFTP segura usando **Paramiko**
- ✅ Configuración directa en el código
- ✅ Transferencia recursiva de carpetas
- ✅ Sin logs, sin validaciones, sin estadísticas
- ✅ Mínimo y funcional

## Pre-requisitos

- Python 3.8 o superior (recomendado Python 3.12.7)

## Instalación

### 1. Instalar Python

Instala Python en la versión requerida si aún no lo tienes instalado.

- Recuerda darle permisos de administrador
- Marca ambas casillas en la instalación (recomendación: "Add Python to PATH" y "Install for all users")

### 2. Instalar Paramiko

Abre la consola de comandos (CMD o PowerShell) y ejecuta:

```bash
pip install paramiko
```

Esto instalará Paramiko directamente en tu sistema.

**Nota:** Si pip muestra un mensaje sugiriendo actualizar, puedes hacerlo con:

```bash
python -m pip install --upgrade pip
```

## Configuración

**Antes de ejecutar cualquier programa**, abre el archivo correspondiente y edita la sección de configuración:

### Para SendFTP.py (Enviar archivos)

```python
SFTP_CONFIG = {
    'SFTP_HOST': 'ftp.sistemaicom.com',        # Tu servidor SFTP
    'SFTP_USER': 'sisicom',                     # Tu usuario
    'SFTP_PASS': 'tu_contraseña_aqui',          # Tu contraseña
    'SFTP_PORT': 223,                           # Puerto (normalmente 22)
    'LOCAL_FOLDER': 'C:/ruta/a/tu/carpeta',     # Carpeta local a enviar
    'REMOTE_FOLDER': '/ruta/en/el/servidor'     # Carpeta destino en servidor
}
```

### Para ReceiveFTP.py (Recibir archivos)

```python
SFTP_CONFIG = {
    'SFTP_HOST': 'ftp.sistemaicom.com',        # Tu servidor SFTP
    'SFTP_USER': 'sisicom',                     # Tu usuario
    'SFTP_PASS': 'tu_contraseña_aqui',          # Tu contraseña
    'SFTP_PORT': 223,                           # Puerto (normalmente 22)
    'REMOTE_FOLDER': '/ruta/en/el/servidor',    # Carpeta origen en servidor
    'LOCAL_FOLDER': 'C:/ruta/destino/local'     # Carpeta destino en tu PC
}
```

**Importante:** Rellena tus datos reales antes de ejecutar.

## Uso

### Enviar archivos al servidor

```bash
python SendFTP.py
```

Sube todos los archivos de `LOCAL_FOLDER` hacia `REMOTE_FOLDER` en el servidor.

### Recibir archivos del servidor

```bash
python ReceiveFTP.py
```

Descarga todos los archivos de `REMOTE_FOLDER` del servidor hacia `LOCAL_FOLDER` en tu PC.

## Comportamiento de los scripts

### SendFTP.py (Enviar)

- **Flujo:** Tu PC → Servidor
- **Lee de:** `LOCAL_FOLDER` (tu PC)
- **Envía a:** `REMOTE_FOLDER` (servidor)
- **NO borra** archivos del servidor
- **Sobrescribe** archivos existentes en el servidor con tu versión local

### ReceiveFTP.py (Recibir)

- **Flujo:** Servidor → Tu PC
- **Lee de:** `REMOTE_FOLDER` (servidor)
- **Descarga a:** `LOCAL_FOLDER` (tu PC)
- **NO borra** archivos del servidor
- **NO borra** archivos locales que no estén en el servidor
- **Sobrescribe** archivos locales existentes con la versión del servidor

## Notas importantes

- ⚠️ **Ningún script borra archivos**, solo los sobrescribe si ya existen
- ⚠️ Si la conexión falla, el programa simplemente termina sin hacer nada
- ⚠️ No hay validaciones previas: si algo falla, Python mostrará el error
- ✅ Las carpetas se crean automáticamente según sea necesario
- ✅ Las conexiones se cierran automáticamente al terminar

## Solución de problemas comunes

### Error "La importación paramiko no se ha podido resolver"

Esto es un problema del linter de VS Code. Soluciones:

1. **Seleccionar intérprete correcto:**

   - Presiona `Ctrl + Shift + P`
   - Escribe: "Python: Select Interpreter"
   - Selecciona el Python donde instalaste paramiko

2. **Verificar instalación:**

   ```bash
   pip list | findstr paramiko
   ```

3. **Reinstalar si es necesario:**
   ```bash
   pip install paramiko --force-reinstall
   ```

### Error de conexión

- Verifica que el host, puerto, usuario y contraseña sean correctos
- Asegúrate de tener acceso a internet
- Confirma que el puerto SFTP esté abierto en el firewall

### Error de rutas

- Usa rutas absolutas (ej: `C:/Users/...` o `/home/usuario/...`)
- Verifica que las rutas existan (para enviar) o sean válidas (para recibir)

### Error de permisos

- Verifica que tu usuario SFTP tenga permisos de lectura/escritura
- Confirma que tengas permisos en las carpetas locales

## Ejemplo de uso completo

```python
# Configuración para ENVIAR archivos
SFTP_CONFIG = {
    'SFTP_HOST': 'ftp.sistemaicom.com',
    'SFTP_USER': 'sisicom',
    'SFTP_PASS': 'mipassword123',
    'SFTP_PORT': 223,
    'LOCAL_FOLDER': 'C:/mis_archivos',
    'REMOTE_FOLDER': '/home/usuario/backup'
}
# Ejecutar: python SendFTP.py
# Resultado: Sube todo de C:/mis_archivos → /home/usuario/backup
```

```python
# Configuración para RECIBIR archivos
SFTP_CONFIG = {
    'SFTP_HOST': 'ftp.sistemaicom.com',
    'SFTP_USER': 'sisicom',
    'SFTP_PASS': 'mipassword123',
    'SFTP_PORT': 223,
    'REMOTE_FOLDER': '/home/usuario/datos',
    'LOCAL_FOLDER': 'C:/descargas'
}
# Ejecutar: python ReceiveFTP.py
# Resultado: Descarga todo de /home/usuario/datos → C:/descargas
```

## Licencia

Derechos reservados ZedhGray
